<Graph ClassName="CustomerMaint" Source="#CDATA" IsNew="True" FileType="ExistingGraph">
    <CDATA name="Source"><![CDATA[using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using PX.Common;
using PX.Data;
using PX.SM;
using PX.Objects.AR.CCPaymentProcessing;
using PX.Objects.AR.Repositories;
using PX.Objects.Common;
using PX.Objects.Common.Discount;
using PX.Objects.CA;
using PX.Objects.CM;
using PX.Objects.CR;
using PX.Objects.CR.Extensions;
using PX.Objects.CS;
using PX.Objects.SO;
using PX.Objects.AR.CCPaymentProcessing.Helpers;
using PX.Data.BQL.Fluent;
using PX.Data.BQL;
using PX.Data.Descriptor;
using CashAccountAttribute = PX.Objects.GL.CashAccountAttribute;
using PX.Objects.GL.Helpers;
using PX.Objects.TX;
using PX.Objects.IN;
using PX.Objects.CR.Extensions.Relational;
using PX.Objects.CR.Extensions.CRCreateActions;
using PX.Objects.GraphExtensions.ExtendBAccount;
using PX.Data.ReferentialIntegrity.Attributes;
using CRLocation = PX.Objects.CR.Standalone.Location;
using PX.Objects;
using PX.Objects.AR;
using PX.Objects.EP;
using KsMasterCustomizationProject;

namespace PX.Objects.AR
{
  public class CustomerMaint_Extension : PXGraphExtension<CustomerMaint>
  {
    #region Data Views

    // Data View for Current Customer's BAccount
    public PXSelect<BAccount, Where<BAccount.bAccountID, Equal<Current<Customer.parentBAccountID>>>> ParentBAccount;

    // Data View for all children
    public PXSelect<BAccount, Where<BAccount.parentBAccountID, Equal<Current<Customer.bAccountID>>>> AllChildAccounts;
    #endregion

    #region Event Handlers

    protected void Customer_RowSelected(PXCache cache, PXRowSelectedEventArgs e)
    {
      Customer row = (Customer)e.Row;

      // Disable Major Tender field if parent account exists
      if (
        row != null &&
        row.ParentBAccountID != null
        )
      {
        PXUIFieldAttribute.SetEnabled<BAccountExt.usrMajorTender>(cache, row, false);
      } else
      {
        PXUIFieldAttribute.SetEnabled<BAccountExt.usrMajorTender>(cache, row, true);
      }

      // Set and show COD Label if terms == "COD"
      if (
        row != null
        && !row.TermsID.Equals("COD")
        )
      {
        //cache.SetValueExt(row, "usrCODLabel", "");
        PXUIFieldAttribute.SetVisible<BAccountExt.usrCODLabel>(cache, row, false);
      }
      else {
        //cache.SetValueExt(row, "usrCODLabel", CustomerIsCODException);
        PXUIFieldAttribute.SetVisible<BAccountExt.usrCODLabel>(cache, row, true);
      }
    }


    protected void Customer_RowUpdated(PXCache cache, PXRowUpdatedEventArgs e)
    {

      
      Customer row = (Customer)e.Row;
      Customer oldRow = (Customer)e.OldRow;

      // Sets child Major Tender Fields to match parent
      BAccountExt ext = row.GetExtension<BAccountExt>();
      BAccountExt oldExt = oldRow.GetExtension<BAccountExt>();

      if (
        ext.UsrMajorTender != null
        && oldExt.UsrMajorTender != null
        && ext.UsrMajorTender != null
        && oldExt.UsrMajorTender != null
        && ext.UsrMajorTender != oldExt.UsrMajorTender
        )
      {
        foreach (BAccount child in AllChildAccounts.Select())
        {
          BAccountExt childExt = child.GetExtension<BAccountExt>();
          childExt.UsrMajorTender = ext.UsrMajorTender;
          AllChildAccounts.Update(child);
        }
      }


      // Adds activity note if customer status changed
      if (
         row.Status != null
         && oldRow.Status != null
         && oldRow.Status != row.Status
         && row.NoteID != null
        ) {
          
        PXTrace.WriteInformation("This ran"); 

        CRPMTimeActivity activity = new CRPMTimeActivity();

        string guid = Base.Accessinfo.UserID.ToString();
        int intuid = int.Parse(guid);

        activity.Subject = $"Customer Status Changed to {row.Status}";
        activity.Type = ActivityTypes.Note;
        activity.OwnerID = intuid;
        activity.RefNoteID = row.NoteID;
        activity.StartDate = DateTime.Now;

        Base.Activities.Insert(activity);

      }
        
    }

    protected void Customer_ParentBAccountID_FieldUpdated(PXCache cache, PXFieldUpdatedEventArgs e)
    {

      Customer row = (Customer)e.Row;

      // Sets Major Tender Field to match Parent
      if (
        row != null &&
        cache.GetValue<Customer.parentBAccountID>(row) != null)
      {
        BAccount parentBAccount = ParentBAccount.SelectSingle();
        BAccountExt parentExt = parentBAccount.GetExtension<BAccountExt>();
        cache.SetValueExt<BAccountExt.usrMajorTender>(row, parentExt.UsrMajorTender);
      }

    }

    #endregion
  }
}]]></CDATA>
</Graph>