<Graph ClassName="APInvoiceEntry" Source="#CDATA" IsNew="True" FileType="ExistingGraph">
    <CDATA name="Source"><![CDATA[using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using PX.Common;
using PX.Data;
using PX.Data.DependencyInjection;
using PX.Data.WorkflowAPI;
//using PX.LicensePolicy;
using PX.Objects.Common;
using PX.Objects.Common.Extensions;
using PX.Objects.Common.Bql;
using PX.Objects.Common.Discount;
using PX.Objects.GL;
using PX.Objects.GL.FinPeriods;
using PX.Objects.CM.Extensions;
using PX.Objects.CS;
using PX.Objects.CR;
using PX.Objects.CT;
using PX.Objects.PM;
using PX.Objects.TX;
using PX.Objects.IN;
using PX.Objects.IN.Services;
using PX.Objects.CA;
using PX.Objects.BQLConstants;
using PX.Objects.EP;
using PX.Objects.PO;
using PX.Objects.SO;
using PX.Objects.DR;
using PX.Objects.AR;
using PX.TM;
using PX.Objects.Extensions.MultiCurrency.AP;
using AP1099Hist = PX.Objects.AP.Overrides.APDocumentRelease.AP1099Hist;
using AP1099Yr = PX.Objects.AP.Overrides.APDocumentRelease.AP1099Yr;
using PX.Objects.GL.Reclassification.UI;
using Branch = PX.Objects.GL.Branch;
using CRLocation = PX.Objects.CR.Standalone.Location;
using PX.Objects.AP.BQL;
using PX.Objects.Common.GraphExtensions.Abstract;
using PX.Objects.Common.GraphExtensions.Abstract.DAC;
using PX.Objects.Common.GraphExtensions.Abstract.Mapping;
using PX.Objects.Extensions.CostAccrual;
using PX.Data.BQL.Fluent;
using PX.Data.BQL;
using PX.Objects;
using PX.Objects.AP;
using KsMasterCustomizationProject;

namespace PX.Objects.AP
{
  public class APInvoiceEntry_Extension : PXGraphExtension<APInvoiceEntry>
  {
    #region Event Handlers

    public SelectFrom<INItemClass>.View AllItemClasses;
    public SelectFrom<InventoryItem>.View AllInventoryItems;
    public SelectFrom<APInvoice>.View DuplicateVendorreferences;

    protected void APTran_InventoryID_FieldUpdated(PXCache cache, PXFieldUpdatedEventArgs e)
    {

      APTran row = (APTran)e.Row;
      APInvoice apInvoice = Base.CurrentDocument.Current;
      InventoryItem item = null;
      // INItemClass itemClass = null;

      if (
        row != null
        && row.InventoryID != null
       )
      {
        foreach (InventoryItem value in AllInventoryItems.Select())
        {
          if (value.InventoryID == row.InventoryID)
          {
            item = value;
            break;
          }
        }
      }

      /**
       * 
      if (item != null)
      {
        foreach (INItemClass value in AllItemClasses.Select())
        {
          if (value.ItemClassID.Equals(item.ItemClassID))
          {
            itemClass = value;
            break;
          }
        }
      }
      */

      if (
          row != null
          && row.InventoryID != null
          && apInvoice != null
          && apInvoice.DocDesc != null
          && item != null
          && item.InventoryCD != null
          && item.InventoryCD.Equals("MISCEXP")
          )
      {
        cache.SetValueExt<APTran.tranDesc>(row, apInvoice.DocDesc);
      }

    }

    #endregion

    #region Actions
    public PXAction<APInvoice> ViewDuplicates;
    [PXButton(DisplayOnMainToolbar = false)]
    [PXUIField(DisplayName = "Search Duplicates", Enabled = true)]
    protected virtual void viewDuplicates()
    {
      APInvoice invoice = Base.Document.Current;


      if (invoice != null && invoice.RefNbr != null && invoice.InvoiceNbr != null)
      {
        var duplicates = SelectFrom<APInvoice>.Where<
        APInvoice.invoiceNbr.FromCurrent.IsEqual<APInvoice.invoiceNbr>
        .And<APInvoice.refNbr.FromCurrent.IsNotEqual<APInvoice.refNbr>>
        >.View.Select(Base);

        if (duplicates.Count > 0)
        {
          var graph = PXGraph.CreateInstance<APInvoiceVendorDuplicatesInq>();
            
          graph.MasterView.Current.InvoiceNbr = invoice.InvoiceNbr;
          graph.MasterView.Current.RefNbr = invoice.RefNbr;

          throw new PXPopupRedirectException(graph, "Vendor Duplicates Inquiry");
          
        } else
        {
          throw new PXSetPropertyException("No Duplicates Found", PXErrorLevel.RowError);
        }

      }
      else {
        throw new PXSetPropertyException("No Reference Number", PXErrorLevel.RowError);
      }
    }
    #endregion
  }
}]]></CDATA>
</Graph>