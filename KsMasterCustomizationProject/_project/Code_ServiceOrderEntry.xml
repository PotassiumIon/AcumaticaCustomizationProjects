<Graph ClassName="ServiceOrderEntry" Source="#CDATA" IsNew="True" FileType="ExistingGraph">
    <CDATA name="Source"><![CDATA[using Autofac;
using PX.Common;
using PX.Data;
using PX.Data.DependencyInjection;
using PX.Data.WorkflowAPI;
using PX.LicensePolicy;
using PX.Objects.AP;
using PX.Objects.AR;
using PX.Objects.CM.Extensions;
using PX.Objects.CN.Common.Extensions;
using PX.Objects.CR;
using PX.Objects.CS;
using PX.Objects.CT;
using PX.Objects.EP;
using PX.Objects.Extensions.MultiCurrency;
using PX.Objects.Extensions.SalesTax;
using PX.Objects.FS.ParallelProcessing;
using PX.Objects.GL;
using PX.Objects.IN;
using PX.Objects.IN.Overrides.INDocumentRelease;
using PX.Objects.PM;
using PX.Objects.PO;
using PX.Objects.SO;
using PX.Objects.TX;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Web.Compilation;
using PX.Objects;
using PX.Objects.FS;
using KsMasterCustomizationProject;
using PX.Data.BQL.Fluent;

namespace PX.Objects.FS
{
  public class ServiceOrderEntry_Extension : PXGraphExtension<ServiceOrderEntry>
  {
  
    public const string RouteServiceOrdersRestricted = "Route service orders can not be created manually.";

    #region Event Handlers

    #region Exclude Route Behavior Service Order Types

    [PXRemoveBaseAttribute(typeof(PXDefaultAttribute))]
    protected virtual void FSServiceOrder_SrvOrdType_CacheAttached(PXCache cache)
    {

    }

    protected void FSServiceOrder_SrvOrdType_FieldVerifying(PXCache cache, PXFieldVerifyingEventArgs e)
    {
      FSServiceOrder row = (FSServiceOrder) e.Row;
      string newValue = (string) e.NewValue;

      if (
        newValue != null
        && Base.ServiceOrderTypeSelected != null 
        && Base.ServiceOrderTypeSelected.Current != null
        && Base.ServiceOrderTypeSelected.Current.Descr != null
        && Base.ServiceOrderTypeSelected.Current.Descr.Contains("Routed Service")
        )
      {
        throw new PXSetPropertyException(RouteServiceOrdersRestricted, PXErrorLevel.RowError);
      }
 
    }

    #endregion

    public PXAction<PX.Objects.FS.FSServiceOrder> AutoAddDetailItems;

    public SelectFrom<InventoryItem>.View inventoryItems;

    [PXButton(CommitChanges = true)]
    [PXUIField(DisplayName = "Auto Add", Visible = true)]
    protected void autoAddDetailItems()
    {

      // Finds the ids for related inventory items
      int shrdelivid = 0;
      int shrconsoleid = 0;
      int shrtoterid = 0;
      int shrschedcid = 0;
      int shrschedtid = 0;

      foreach (InventoryItem item in inventoryItems.Select())
      {
        if (item.InventoryCD != null && item.InventoryCD.Contains("SHR-DELIV")) shrdelivid = (int)item.InventoryID;
        if (item.InventoryCD != null && item.InventoryCD.Contains("SHRCONSOLE")) shrconsoleid = (int)item.InventoryID;
        if (item.InventoryCD != null && item.InventoryCD.Contains("SHR-SCHEDC")) shrschedcid = (int)item.InventoryID;
        if (item.InventoryCD != null && item.InventoryCD.Contains("SHRTOTER")) shrtoterid = (int)item.InventoryID;
        if (item.InventoryCD != null && item.InventoryCD.Contains("SHR-SCHEDT")) shrschedtid = (int)item.InventoryID;
      }

      // Creates and inserts service order detail record for SHR-DELIV item
      FSSODet line = Base.ServiceOrderDetails.Insert();
      line.BranchID = Base.Accessinfo.BranchID;
      line.EstimatedQty = (decimal)1.0;
      line.BillableQty = (decimal)1.0;
      line.InventoryID = shrdelivid;
      Base.ServiceOrderDetails.Update(line);

      // Adds detail lines for the contract
      foreach (FSContractPeriodDet item in Base.BillServiceContractPeriodDetail.Select())
      {
        if (item.InventoryID == shrschedcid)
        {
          line = Base.ServiceOrderDetails.Insert();
          line.BranchID = Base.Accessinfo.BranchID;
          line.EstimatedQty = item.Qty;
          line.BillableQty = item.Qty;
          line.InventoryID = shrconsoleid;
          Base.ServiceOrderDetails.Update(line);
        }
        else if (item.InventoryID == shrschedtid)
        {
          line = Base.ServiceOrderDetails.Insert();
          line.BranchID = Base.Accessinfo.BranchID;
          line.EstimatedQty = item.Qty;
          line.BillableQty = item.Qty;
          line.InventoryID = shrtoterid;
          Base.ServiceOrderDetails.Update(line);
        }
      }
      
    }

    protected void FSServiceOrder_RowSelected(PXCache cache, PXRowSelectedEventArgs e)
    {

      var row = (FSServiceOrder)e.Row;

      FSServiceOrderExt ext = cache.GetExtension<FSServiceOrderExt>(row);

      // Constraints for Auto Add button
      if (
        row.SrvOrdType != null &&
        row.SrvOrdType == "MVMT" &&
        row.BillServiceContractID != null &&
        ext.UsrServiceDescription != null &&
        ext.UsrServiceDescription.Contains(ServiceOrderDescriptions.ShreddingContainerDelivery)
        )
      {
        AutoAddDetailItems.SetEnabled(true);
      }
      else
      {
        AutoAddDetailItems.SetEnabled(false);
      }
    }

    #endregion
  }
}]]></CDATA>
</Graph>